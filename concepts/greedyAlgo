Greedy Algorithm

Largest Number in given digits:
_____________________________________
9, 8 , 9 , 6 , 1 

 Correct answer 99861
 we take the max digit and put it first, then we take the second max digit and so on.
 
 Logic:
 every time, we pick the max element.
 then we remove that from the list.
 In the remaining, repeat the max operation in the elements remaining in list.
 keep repeating untill list is empty.
 
 we break the problem into sub problems and for each subprolem we perform the operation.
 
Queue of Patients: 
_____________________________________
 A lot of patients have come at same time, we need to arrange the queue so that the total waiting time is minimum. Doctor can treat only one patient at a time.
 
 1) Make a greedy choise (This needs to be a safe/best choice)
 2) Reduce to a smaller problem
 3) Iterate 
 
 Greedy choice First treat the patient with minimum treatment time. the go on.
 
 MinTotalWaitingTime(t,n)
  waitingTime = 0
  treated <-- array of n zeroes
  for  i from 1 to n:
    tMin = infinity
    minIndex = 0
    for j in 1 to n:
       if treated[i]==0 && t[j]< tMin :
         tMIn = t[j]
         minIndex = j
    waitingTIme = waitingTIme + (n-i) tMin
    treated[minIndex] = 1
   return waitingTime
   
   we have 2 for loops, O(n^2)
   
 Actually, this can be solved in O(n log n)
  we can sort the patients by increasing order of time. 
  each step we pick the first patient. 
 Sort will take  O(n log n) . and finding the wiatingTime for n items takes n. Sototal O(n log n).
 
 Celebration Party Problem
 _____________________________________
 
Children have come to a celebration . Organize them into the minimum possible number of groups such that age of two children in 
same group differs by atmost 2.
We want to keep the number of groups, to minimum.

We can try all possible groups and see if the groups have child whose age differ by atmost 2.
This will work. But its running time will be atleast 2^n . where n is number of children.
This is very huge. 

Algo : Covering points by segments
 to solve the celebration problem, we want to floolow the same approach as covering points by segments.
 We have been given a set of points in a straight line, we want to cover those points with a segment/scale which is of length 2.
 we need to find the min number of segemnts need to cover all the points. 
 
 Optimal soln will be to start with the segment in the left most point and all ponts convering the segemnet can be ignored.
 start with the next left point and pick it as the left most of segemtn and keep repeating.
 This is the greedy choice. 
 
 Once we solve this, we can apply same logic to the children problem .
 
 PointsCoveredSorted(x1, x2... xn) 
 segments <-- empty list
 left <-- 1
 while left <= n:
  (l,r) <-- (xleft, xleft +2)
  segments.append(l,r)
  left = left +1
  while left<=n && right>=xleft:
   left = left +1
 return segments  
 
 Sort takes O(n logn) and the son takes n.
 So O(n log n)
 
 Maximising loot / Knapsack problem
  _____________________________________
  
 We have a knapsack of weight w. It can be fileed with any items in diffeetn ratios. We have different items, its total weight availabel and the value for 
 each of it. We need to pick the items so that the total will be max profit. we can pick ratio of items as well. consider items as flour/spices.
 
 
We can start with the items which has the max value. But its total wight could be very huge and other items with min wight could have better average value.
so we need to find the safe choice. 
What if we start adding items which are of small wieight, this cal also be error.
Optimal or safe choice, is to find the value per unit of each item. Then the item which has higher value per unit, will be the best one to pick.
then we pick the next one and keep repeating. 

value per unit = value/weight

1) while kapsack is not full 
2) choose item of highest value/weight
3) if it fits into knapsack pick it all
4) else take so mush that fits
5) return total value and amount taken 


bestItem(w1, w2, ... wn)
 maxValuePerWeight =0
 bestItem = 0
 for i in 1 to n:
  if wi > 0:
   if vi/wi > maxValuePerWeight:
    maxValuePerWeight = vi/wi
    bestitem = i
 return bestItem
 
 knapsack(W, w1, w2.. wn):
  amounts = [0,0,..0]
  totalvalue =0
  repeat n times:
   if W =0:
    return (totalValue, amunts)
   i = bestItem(w, v1, .. wn,vn)
   a = min(wi, W). // how much to take of the best item ? if its fits into knapsack, take all, else just what fits. a is what we can take.
   totalvalue = totalvalue + a vi/wi
   wi = wi - a
   amounts[i] = amounts[i] + a
   W = W -a 
  return (totalValues, amounts)
  

